--## INSTRUCTION ##--
--[[
    Create 3 files named accordingly to "x.txt", "y.txt", "z.txt"
]]

local position = { ... }
local x = position[1]
local y = position[2]
local z = position[3]
local facing = position[4]

--## Reformat facing
local facings = { 'n', 'e', 's', 'w' }

--## Getting/Restoring positions
if x and y and z and facing then
    print('New position!')
    --Overriding old saves
    local x_file = fs.open('x.txt', 'w+')
    local y_file = fs.open('y.txt', 'w+')
    local z_file = fs.open('z.txt', 'w+')
    local facing_file = fs.open('facing.txt', 'w+')

    x_file.write(x)
    y_file.write(y)
    z_file.write(z)
    facing_file.write(facing)

    x_file.close()
    y_file.close()
    z_file.close()
    facing_file.close()
else
    print('Restoring last position!')
    local old_x = fs.find('x.txt')
    local old_y = fs.find('y.txt')
    local old_z = fs.find('z.txt')
    local old_facing = fs.find('facing.txt')
    if old_x and old_y and old_z then
        x = fs.open('x.txt', 'r').readAll()
        y = fs.open('y.txt', 'r').readAll()
        z = fs.open('z.txt', 'r').readAll()
        facing = fs.open('facing.txt', 'r').readAll()
    end
end

--## Convert to numbers
x = tonumber(x)
y = tonumber(y)
z = tonumber(z)

--## Goto
local x_dest = tonumber(position[5])
local y_dest = tonumber(position[6])
local z_dest = tonumber(position[7])

local forward = turtle.forward
local back = turtle.back
local left = turtle.turnLeft
local right = turtle.turnRight

local function index(array, value)
    for i = 1, #array do
        if value == array[i] then
            return i
        end
    end
end

local function turnLeft()
    facing = facings[(index(facings, facing) - 2) % #facings + 1]
    left()
end

local function turnRight()
    facing = facings[(index(facings, facing) % #facings) + 1]
    right()
end

local function goToX(dest)
    if x > dest then
        while facing ~= 'w' do
            if facing == 'n' then
                turnLeft()
            else
                turnRight()
            end
        end
        while x > dest do
            x = x - 1
            forward()
        end
    end

    if x < dest then
        while facing ~= 'e' do
            if facing == 's' then
                turnLeft()
            else
                turnRight()
            end
        end
        while x < dest do
            x = x + 1
            forward()
        end
    end
end

goToX(x_dest)
